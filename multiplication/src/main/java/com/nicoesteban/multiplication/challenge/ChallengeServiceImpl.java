package com.nicoesteban.multiplication.challenge;

import com.nicoesteban.multiplication.serviceclients.GamificationServiceClient;
import com.nicoesteban.multiplication.user.User;
import com.nicoesteban.multiplication.user.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import java.util.List;

@Slf4j
@RequiredArgsConstructor
@Service
public class ChallengeServiceImpl implements ChallengeService {

    private final UserRepository userRepository;
    private final ChallengeAttemptRepository attemptRepository;
    private final GamificationServiceClient gameClient;

    @Override
    public ChallengeAttempt verifyAttempt(ChallengeAttemptDTO attemptDto) {
        //Check if the user already exist for that alias, otherwise create it
        User user = userRepository.findByAlias(attemptDto.getUserAlias())
                .orElseGet(() -> {
                    log.info("Creating new user with alias {}", attemptDto.getUserAlias());
                    return userRepository.save(
                            new User(attemptDto.getUserAlias())
                    );
                });

        //Check if the attempt is correct
        boolean isCorrect = attemptDto.getGuess() ==
                attemptDto.getFactorA() * attemptDto.getFactorB();

        //Builds the domain object. Null id since it'll be generated by the DB
        ChallengeAttempt checkedAttempt = new ChallengeAttempt(
                null,
                user,//user.getId()
                attemptDto.getFactorA(),
                attemptDto.getFactorB(),
                attemptDto.getGuess(),
                isCorrect);

        //Stores the attempt
        ChallengeAttempt storedAttempt = attemptRepository.save(checkedAttempt);

        //*** Sends the attempt to gamification
        gameClient.sendAttempt(storedAttempt);
        log.info("Stored attempt sent to Gamification service.");

        return storedAttempt;
    }

    @Override
    public List<ChallengeAttempt> getStatsForUser(String userAlias) {
        return attemptRepository.findTop10ByUserAliasOrderByIdDesc(userAlias);
    }
}
