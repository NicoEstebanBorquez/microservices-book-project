package com.nicoesteban.multiplication.challenge;

import com.nicoesteban.multiplication.user.User;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;

@Slf4j
@RequiredArgsConstructor
@Service
public class ChallengeServiceImpl implements ChallengeService {

    //private final UserRepository userRepository;
    //private final ChallengeAttemptRepository attemptRepository;

    @Override
    public ChallengeAttempt verifyAttempt(ChallengeAttemptDTO attemptDto) {
        /*//Check if the user already exist for that alias, otherwise create it
        User user = userRepository.findByAlias(attemptDto.getUserAlias())
                .orElseGet(() -> {
                    log.info("Creating new user with alias {}", attemptDto.getUserAlias());
                    return userRepository.save(
                            new User(attemptDto.getUserAlias())
                    );
                });

        //Check if the attempt is correct
        boolean isCorrect = attemptDto.getGuess() ==
                attemptDto.getFactorA() * attemptDto.getFactorB();

        //Builds the domain object. Null id since it'll be generated by the DB
        ChallengeAttempt checkedAttempt = new ChallengeAttempt(
                null,
                user,//user.getId()
                attemptDto.getFactorA(),
                attemptDto.getFactorB(),
                attemptDto.getGuess(),
                isCorrect);

        //Stores the attempt
        ChallengeAttempt storedAttempt = attemptRepository.save(checkedAttempt);

        return storedAttempt;*/

        //Check if the attempt is correct
        boolean isCorrect = attemptDto.getGuess() == attemptDto.getFactorA() * attemptDto.getFactorB();

        log.info("Verifying attempt: {}, * {}", attemptDto.getFactorA(), attemptDto.getFactorB());
        //We dont use identifiers for now
        User user = new User(null, attemptDto.getUserAlias());


        //Build the domain object
        ChallengeAttempt checkedAttempt = new ChallengeAttempt(null,
                user.getId(),//user,
                attemptDto.getFactorA(),
                attemptDto.getFactorB(),
                attemptDto.getGuess(),
                isCorrect);

        return checkedAttempt;

    }

    /*@Override
    public List<ChallengeAttempt> getStatsForUser(String userAlias) {
        return attemptRepository.findTop10ByUserAliasOrderByIdDesc(userAlias);
    }*/
}
